/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-05-09 05:06:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class hello_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("* {\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	font-family: Consolas, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("fieldset {\r\n");
      out.write("	width: 40%;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	gap: 1px\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".fieldset-container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	gap: 2px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<section class=\"fieldset-container\">\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>post ex</legend>\r\n");
      out.write("			<a href=\"http://localhost:8080/HelloWorld/login.jsp\">login.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>init param, context param ex</legend>\r\n");
      out.write("			<a href=\"http://localhost:8080/HelloWorld/paramex.jsp\">paramex.jsp</a>\r\n");
      out.write("			<a href=\"http://localhost:8080/HelloWorld/paramex2.jsp\">paramex2.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>request & response ex</legend>\r\n");
      out.write("			<a href=\"jsp_11_1_ex1_request/jsp_11_1_ex1_requestParamForm.jsp\">jsp_11_1_ex1_requestParamForm.jsp</a>\r\n");
      out.write("			<a href=\"jsp_11_2_ex1_response/jsp_11_2_ex1_responseForm.jsp\">jsp_11_2_ex1_responseForm.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>action tag ex</legend>\r\n");
      out.write("			<a href=\"jsp_12_2_ex1_actiontagex/forwardMain.jsp\">forWardMain.jsp</a>\r\n");
      out.write("			<a href=\"jsp_12_2_ex1_actiontagex/forwardParam.jsp\">forWardParam.jsp</a>\r\n");
      out.write("			<a href=\"jsp_12_2_ex1_actiontagex/include01.jsp\">include01.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>cookie login logout ex</legend>\r\n");
      out.write("			<a href=\"jsp_13_2_ex1_cookieex/login.jsp\">login.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>session login logout ex</legend>\r\n");
      out.write("			<a href=\"jsp_14_2_ex1_sessionex/login.jsp\">login.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>exception ex</legend>\r\n");
      out.write("			<a href=\"jsp_15_2_ex1_exceptionex/generateError.jsp\">generateError.jsp</a>\r\n");
      out.write("			<a href=\"jsp_15_2_ex1_exceptionex/notExist.jsp\">notExist.jsp -> generateErrorXML.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>java bean ex</legend>\r\n");
      out.write("			<a href=\"jsp_16_2_ex1_beanex/member.jsp\">member.jsp</a>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		<br>\r\n");
      out.write("	</section>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
